import os
import certifi
import requests
import csv
import sys

# Try to find a working certificate bundle path (this part might still be needed)
cert_path = None
possible_cert_paths = [
    '/etc/ssl/cert.pem',
    '/usr/local/etc/openssl@1.1/cert.pem',
    '/usr/local/etc/openssl@3/cert.pem',
    '/opt/homebrew/etc/openssl@1.1/cert.pem',
    '/opt/homebrew/etc/openssl@3/cert.pem',
    certifi.where()
]
for path in possible_cert_paths:
    if os.path.exists(path):
        cert_path = path
        break

if cert_path:
    os.environ['REQUESTS_CA_BUNDLE'] = cert_path
    print(f"Using certificate bundle: {cert_path}")
else:
    print("Warning: Could not find a valid certificate bundle. SSL verification may fail.")


# Constants
access_token = "{TOKEN}"  # Replace with your actual access token! (NEW TOKEN)
csv_file_path = "{PATH}"  # Your CSV file path


def add_chapters(video_id, row, proxies=None):
    chapters = []
    for i in range(1, 4):
        timecode_key = f'chapter_timecode_{i}'
        title_key = f'chapter_title_{i}'
        if row.get(timecode_key) and row.get(title_key):
            try:
                chapters.append({
                    'timecode': int(float(row.get(timecode_key))),
                    'title': row.get(title_key)
                })
            except ValueError:
                print(f"Warning: Invalid timecode '{row.get(timecode_key)}' for {title_key}. Skipping chapter.")

    if chapters:
        chapters_url = f"https://api.vimeo.com/videos/{video_id}/chapters/batch"
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
            "Accept": "application/vnd.vimeo.*+json;version=3.4"
        }
        response = requests.put(chapters_url, headers=headers, json=chapters, verify=False, proxies=proxies)  # verify=False for testing ONLY!
        try:
            response.raise_for_status()
            print(f"Chapters added to video ID: {video_id}")
        except requests.exceptions.HTTPError as e:
            print(f"Failed to add chapters for video ID: {video_id}: {e}")
            if response is not None:
                print(f"Response status code: {response.status_code}")
                print(f"Response text: {response.text}")
    else:
        print(f"No chapters to add for video ID: {video_id}")


def process_csv(csv_file_path, proxies=None):
    try:
        with open(csv_file_path, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            print("CSV Headers:", reader.fieldnames)
            for row in reader:
                video_id = row.get('video_filename')
                if video_id:
                    try:
                        video_id = int(video_id)
                        add_chapters(video_id, row, proxies)
                    except ValueError:
                        print(f"Error: Invalid video ID '{video_id}' in CSV. Skipping row.")
                else:
                    print("Error: No video ID found in this row. Skipping.")

    except FileNotFoundError:
        print(f"Error: CSV file not found: {csv_file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    # Check for proxy environment variables
    proxies = {
        'http': os.environ.get('http_proxy'),
        'https': os.environ.get('https_proxy'),
    }

    if proxies['http'] or proxies['https']:
        print(f"Using proxy settings: {proxies}")
    else:
        print("No proxy settings found.")

    process_csv(csv_file_path, proxies)
